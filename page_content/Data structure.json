{"id": 8519, "key": "Data_structure", "title": "Data structure", "latest": {"id": 1210609480, "timestamp": "2024-02-27T13:08:14Z"}, "content_model": "wikitext", "license": {"url": "https://creativecommons.org/licenses/by-sa/4.0/deed.en", "title": "Creative Commons Attribution-Share Alike 4.0"}, "source": "{{short description|Particular way of storing and organizing data in a computer}}\n{{hatgrp|\n{{otheruses}}\n{{distinguish|Data type|Data model}}\n}}\n{{For|information on Wikipedia's data structure|Wikipedia:Administration#Data structure and development|selfref=yes}}\n[[Image:Hash table 3 1 1 0 1 0 0 SP.svg|thumb|315px|A data structure known as a [[hash table]].]] \nIn [[computer science]], a '''data structure''' is a [[data]] organization, management, and storage format that is usually chosen for [[Efficiency|efficient]] [[Data access|access]] to data.<ref>{{Cite book|url=https://dl.acm.org/citation.cfm?id=1614191|title=Introduction to Algorithms, Third Edition|last1=Cormen|first1=Thomas H.|last2=Leiserson|first2=Charles E.|last3=Rivest|first3=Ronald L.|last4=Stein|first4=Clifford|date=2009|publisher=The MIT Press|isbn=978-0262033848|edition=3rd}}</ref><ref>{{cite book |last1=Black |first1=Paul E. |editor1-last=Pieterse |editor1-first=Vreda |editor2-last=Black |editor2-first=Paul E. |title=Dictionary of Algorithms and Data Structures [online] |date=15 December 2004 |publisher=[[National Institute of Standards and Technology]] |chapter-url=https://xlinux.nist.gov/dads/HTML/datastructur.html |access-date=2018-11-06 |chapter=data structure}}</ref><ref>{{cite encyclopedia |encyclopedia=Encyclopaedia Britannica |title= Data structure |url=https://www.britannica.com/technology/data-structure |access-date=2018-11-06 |date=17 April 2017}}</ref> More precisely, a data structure is a collection of data values, the relationships among them, and the [[Function (computer programming)|functions]] or [[Operator (computer programming)|operations]] that can be applied to the data,<ref>{{Cite book|url=http://dl.acm.org/citation.cfm?id=1074100.1074312|title=Encyclopedia of Computer Science|last1=Wegner|first1=Peter|last2=Reilly|first2=Edwin D.|publisher=John Wiley and Sons |isbn=978-0470864128|location=Chichester, UK|pages=507\u2013512|date=2003-08-29}}</ref> i.e., it is an [[algebraic structure]] about [[data]].\n\n==Usage ==\nData structures serve as the basis for [[abstract data type]]s (ADT). The ADT defines the logical form of the data type. The data structure implements the physical form of the [[data type]].<ref>{{cite web|title=Abstract Data Types|url=https://opendsa-server.cs.vt.edu/ODSA/Books/CS3/html/ADT.html|website=Virginia Tech - CS3 Data Structures & Algorithms|access-date=2023-02-15|archive-url=https://web.archive.org/web/20230210114105/https://opendsa-server.cs.vt.edu/ODSA/Books/CS3/html/ADT.html|archive-date=2023-02-10|url-status=live}}</ref>\n\nDifferent types of data structures are suited to different kinds of applications, and some are highly specialized to specific tasks. For example, [[Relational database|relational databases]] commonly use [[B-tree]] indexes for data retrieval,<ref>{{cite book|chapter-url=http://searchsecurity.techtarget.com/generic/0,295582,sid87_gci1184450,00.html|archive-url=https://web.archive.org/web/20070818140343/http://searchsqlserver.techtarget.com/generic/0,295582,sid87_gci1184450,00.html|archive-date=2007-08-18|url-status=usurped|title=Beginning Database Design|isbn=978-0-7645-7490-0|author=Gavin Powell|chapter=Chapter 8: Building Fast-Performing Database Models|publisher=[[Wrox Press|Wrox Publishing]]|year=2006}}</ref> while [[compiler]] [[Implementation|implementations]] usually use [[hash table]]s to look up [[Identifier (computer languages)|identifiers]].<ref>{{cite web |title=1.5 Applications of a Hash Table |url=http://www.cs.uregina.ca/Links/class-info/210/Hash/ |website=University of Regina - CS210 Lab: Hash Table |access-date=2018-06-14 |archive-date=2021-04-27 |archive-url=https://web.archive.org/web/20210427183057/https://www.cs.uregina.ca/Links/class-info/210/Hash/ |url-status=dead }}</ref>\n\nData structures provide a means to manage large amounts of data efficiently for uses such as large [[database]]s and internet indexing services. Usually, efficient data structures are key to designing efficient [[algorithm]]s. Some formal design methods and [[programming language]]s emphasize data structures, rather than algorithms, as the key organizing factor in software design. Data structures can be used to organize the storage and retrieval of information stored in both [[main memory]] and [[Computer data storage|secondary memory]].<ref>{{cite web |title=When data is too big to fit into the main memory | archive-url=https://web.archive.org/web/20180410032656/http://homes.sice.indiana.edu/yye/lab/teaching/spring2014-C343/datatoobig.php | url-status=dead | archive-date=2018-04-10 |url=http://homes.sice.indiana.edu/yye/lab/teaching/spring2014-C343/datatoobig.php |website=Indiana University Bloomington - Data Structures (C343/A594)|year=2014}}</ref>\n\n==Implementation==\nData structures can be implemented using a variety of programming languages and techniques, but they all share the common goal of efficiently organizing and storing data.<ref>{{Cite journal |last1=Vaishnavi |first1=Gunjal |last2=Shraddha |first2=Gavane |last3=Yogeshwari |first3=Joshi |date=2021-06-21 |title=Survey Paper on Fine-Grained Facial Expression Recognition using Machine Learning |url=http://www.ijcaonline.org/archives/volume183/number11/vaishnavi-2021-ijca-921427.pdf |journal=International Journal of Computer Applications |volume=183 |issue=11 |pages=47\u201349 |doi=10.5120/ijca2021921427}}</ref> Data structures are generally based on the ability of a [[computer]] to fetch and store data at any place in its memory, specified by a [[pointer (computer programming)|pointer]]\u2014a [[bit]] [[String (computer science)|string]], representing a [[memory address]], that can be itself stored in memory and manipulated by the program. Thus, the [[Array data structure|array]] and [[record (computer science)|record]] data structures are based on computing the addresses of data items with [[arithmetic operations]], while the [[linked data structure]]s are based on storing addresses of data items within the structure itself. This approach to data structuring has profound implications for the efficiency and scalability of algorithms. For instance, the contiguous memory allocation in arrays facilitates rapid access and modification operations, leading to optimized performance in sequential data processing scenarios.<ref>{{Citation |last1=Nievergelt |first1=J\u00fcrg |title=Chapter 17 - Spatial Data Structures: Concepts and Design Choices |date=2000-01-01 |url=https://www.sciencedirect.com/science/article/pii/B9780444825377500188 |work=Handbook of Computational Geometry |pages=725\u2013764 |editor-last=Sack |editor-first=J. -R. |access-date=2023-11-12 |place=Amsterdam |publisher=North-Holland |isbn=978-0-444-82537-7 |last2=Widmayer |first2=Peter |editor2-last=Urrutia |editor2-first=J.}}</ref> \n\nThe implementation of a data structure usually requires writing a set of [[subroutine|procedures]] that create and manipulate instances of that structure. The efficiency of a data structure cannot be analyzed separately from those operations. This observation motivates the theoretical concept of an [[abstract data type]], a data structure that is defined indirectly by the operations that may be performed on it, and the mathematical properties of those operations (including their space and time cost).<ref>{{Cite book|title=Advanced biotechnology : For B Sc and M Sc students of biotechnology and other biological sciences.|last=Dubey, R. C.|date=2014|publisher=S Chand|isbn=978-81-219-4290-4|location=New Delhi|oclc=883695533}}</ref>\n\n==Examples==\n{{main article|List of data structures}}\n[[File:Python 3. The standard type hierarchy.png|thumb|The standard [[Data type|type]] hierarchy of the programming language [[Python_(programming_language) | Python 3]].]]\nThere are numerous types of data structures, generally built upon simpler [[primitive data type]]s. Well known examples are:<ref>{{Cite book|title=Data structures|last=Seymour|first=Lipschutz|date=2014|publisher=McGraw Hill Education|isbn=9781259029967|edition=Revised first|location=New Delhi, India|oclc=927793728}}</ref>\n* An [[Array (data structure)|array]] is a number of elements in a specific order, typically all of the same type (depending on the language, individual elements may either all be forced to be the same type, or may be of almost any type). Elements are accessed using an integer index to specify which element is required. Typical implementations allocate contiguous memory words for the elements of arrays (but this is not always a necessity). Arrays may be fixed-length or resizable.\n* A [[linked list]] (also just called ''list'') is a linear collection of data elements of any type, called nodes, where each node has itself a value, and points to the next node in the linked list. The principal advantage of a linked list over an array is that values can always be efficiently inserted and removed without relocating the rest of the list. Certain other operations, such as [[random access]] to a certain element, are however slower on lists than on arrays.\n* A [[Record (computer science)|record]] (also called ''tuple'' or ''struct'') is an [[aggregate data]] structure. A record is a value that contains other values, typically in fixed number and sequence and typically indexed by names. The elements of records are usually called ''fields'' or ''members''. In the context of [[object-oriented programming]], records are known as [[plain old data structure]]s to distinguish them from objects.<ref>{{cite web|url=http://www.fnal.gov/docs/working-groups/fpcltf/Pkg/ISOcxx/doc/POD.html |access-date=6 December 2016 |title=C++ Language Note: POD Types |author=Walter E. Brown |publisher=[[Fermi National Accelerator Laboratory]] |date=September 29, 1999|archive-url=https://web.archive.org/web/20161203130543/http://www.fnal.gov/docs/working-groups/fpcltf/Pkg/ISOcxx/doc/POD.html|archive-date=2016-12-03}}</ref>\n* [[Hash table]]s, also known as hash maps, are data structures that provide fast retrieval of values based on keys. They use a hashing function to map keys to indexes in an array, allowing for constant-time access in the average case. Hash tables are commonly used in dictionaries, caches, and database indexing. However, hash collisions can occur, which can impact their performance. Techniques like chaining and open addressing are employed to handle collisions.\n* [[Graph (abstract data type)|Graphs]] are collections of nodes connected by edges, representing relationships between entities. Graphs can be used to model social networks, computer networks, and transportation networks, among other things. They consist of vertices (nodes) and edges (connections between nodes). Graphs can be directed or undirected, and they can have cycles or be acyclic. Graph traversal algorithms include breadth-first search and depth-first search.\n* [[Stack (abstract data type)|Stacks]] and [[queue (abstract data type)|queues]] are abstract data types that can be implemented using arrays or linked lists. A stack has two primary operations: push (adds an element to the top of the stack) and pop (removes the topmost element from the stack), that follow the Last In, First Out (LIFO) principle. Queues have two main operations: enqueue (adds an element to the rear of the queue) and dequeue (removes an element from the front of the queue) that follow the First In, First Out (FIFO) principle.\n* [[Tree (data structure)|Trees]] represent a hierarchical organization of elements. A tree consists of nodes connected by edges, with one node being the root and all other nodes forming subtrees. Trees are widely used in various algorithms and data storage scenarios. [[Binary tree]]s (particularly [[Heap (data structure)|heap]]s), [[AVL tree]]s, and [[B-tree]]s are some popular types of trees. They enable efficient and optimal searching, sorting, and hierarchical representation of data.\n* A [[trie]], also known as a prefix tree, is a specialized tree data structure used for the efficient retrieval of strings. Tries store characters of a string as nodes, with each edge representing a character. They are particularly useful in text processing scenarios like autocomplete, spell-checking, and dictionary implementations. Tries enable fast searching and prefix-based operations on strings.\n\n==Language support==\nMost [[assembly language]]s and some [[Low-level programming language|low-level languages]], such as [[BCPL]] (Basic Combined Programming Language), lack built-in support for data structures. On the other hand, many [[high-level programming language]]s and some higher-level assembly languages, such as [[MASM]], have special syntax or other built-in support for certain data structures, such as records and arrays. For example, the [[C (programming language)|C]] (a direct descendant of BCPL) and [[Pascal (programming language)|Pascal]] languages support [[Record (computer science)|structs]] and records, respectively, in addition to vectors (one-dimensional [[array data type|arrays]]) and multi-dimensional arrays.<ref name=\"gnu-c\">{{cite web | url=https://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html | title=The GNU C Manual | publisher=Free Software Foundation | access-date=2014-10-15}}</ref><ref>{{cite web | url=http://www.freepascal.org/docs-html/ref/ref.html | title=Free Pascal: Reference Guide | publisher=Free Pascal |first = Micha\u00ebl |last =Van Canneyt|date = September 2017}}</ref>\n\nMost programming languages feature some sort of [[Library (computing)|library]] mechanism that allows data structure implementations to be reused by different programs. Modern languages usually come with standard libraries that implement the most common data structures. Examples are the [[C++]] [[Standard Template Library]], the [[Java Collections Framework]], and the [[Microsoft]] [[.NET Framework]].\n\nModern languages also generally support [[modular programming]], the separation between the [[interface (computing)|interface]] of a library module and its implementation. Some provide [[opaque data type]]s that allow clients to hide implementation details. [[Object-oriented programming language]]s, such as [[C++]], [[Java (programming language)|Java]], and [[Smalltalk]], typically use [[classes (computer science)|classes]] for this purpose.\n\nMany known data structures have [[concurrent data structure|concurrent]] versions which allow multiple computing threads to access a single concrete instance of a data structure simultaneously.<ref>{{cite web |author1=Mark Moir and Nir Shavit |title=Concurrent Data Structures |url=https://www.cs.tau.ac.il/~shanir/concurrent-data-structures.pdf |archive-url=https://web.archive.org/web/20110401070433/http://www.cs.tau.ac.il/~shanir/concurrent-data-structures.pdf |archive-date=2011-04-01 |url-status=dead |website=cs.tau.ac.il}}</ref>\n\n==See also==\n{{Div col|colwidth=15em}}\n* [[Abstract data type]]\n* [[Concurrent data structure]]\n* [[Data model]]\n* [[Dynamization]]\n* [[Linked data structure]]\n* [[List of data structures]]\n* [[Persistent data structure]]\n* [[Plain old data structure]]\n* [[Queap]]\n* [[Succinct data structure]]\n* [[Tree (data structure)]]\n{{Div col end}}\n\n==References==\n{{Reflist}}\n\n==Bibliography==\n* Peter Brass, ''Advanced Data Structures'', [[Cambridge University Press]], 2008, {{ISBN|978-0521880374}}\n* [[Donald Knuth]], ''[[The Art of Computer Programming]]'', vol. 1. [[Addison-Wesley]], 3rd edition, 1997, {{ISBN|978-0201896831}}\n* Dinesh Mehta and [[Sartaj Sahni]], ''Handbook of Data Structures and Applications'', [[Chapman and Hall]]/[[CRC Press]], 2004, {{ISBN|1584884355}}\n* [[Niklaus Wirth]], ''Algorithms and Data Structures'', [[Prentice Hall]], 1985, {{ISBN|978-0130220059}}\n\n==Further reading==\n* [[Alfred Aho]], [[John Hopcroft]], and [[Jeffrey Ullman]], ''Data Structures and Algorithms'', Addison-Wesley, 1983, {{ISBN|0-201-00023-7}}\n* [[Gaston Gonnet|G. H. Gonnet]] and [[Ricardo Baeza-Yates|R. Baeza-Yates]], ''[https://users.dcc.uchile.cl/~rbaeza/handbook/hbook.html Handbook of Algorithms and Data Structures - in Pascal and C]'', second edition, Addison-Wesley, 1991, {{ISBN|0-201-41607-7}}\n* [[Ellis Horowitz]] and Sartaj Sahni, ''Fundamentals of Data Structures in Pascal'', [[Computer Science Press]], 1984, {{ISBN|0-914894-94-3}}\n\n==External links==\n{{Sister project links|wikt=data structure|commons=Category:Data structures|b=Data Structures|v=Topic:Data structures|n=no}}\n* [https://web.archive.org/web/20050624234059/http://www.nist.gov/dads/ Descriptions] from the [[Dictionary of Algorithms and Data Structures]]\n* [http://www.cs.auckland.ac.nz/software/AlgAnim/ds_ToC.html Data structures course]\n* [http://msdn.microsoft.com/en-us/library/aa289148(VS.71).aspx An Examination of Data Structures from .NET perspective]\n* [http://people.cs.vt.edu/~shaffer/Book/C++3e20110915.pdf Schaffer, C. ''Data Structures and Algorithm Analysis'']\n\n{{Data structures}}\n{{Data types}}\n{{Data model}}\n{{Strings}}\n\n{{Authority control}}\n\n{{DEFAULTSORT:Data Structure}}\n[[Category:Data structures| ]]", "sections": [{"title": null, "content": "{{short description|Particular way of storing and organizing data in a computer}}\n{{hatgrp|\n{{otheruses}}\n{{distinguish|Data type|Data model}}\n}}\n{{For|information on Wikipedia's data structure|Wikipedia:Administration#Data structure and development|selfref=yes}}\n[[Image:Hash table 3 1 1 0 1 0 0 SP.svg|thumb|315px|A data structure known as a [[hash table]].]] \nIn [[computer science]], a '''data structure''' is a [[data]] organization, management, and storage format that is usually chosen for [[Efficiency|efficient]] [[Data access|access]] to data.<ref>{{Cite book|url=https://dl.acm.org/citation.cfm?id=1614191|title=Introduction to Algorithms, Third Edition|last1=Cormen|first1=Thomas H.|last2=Leiserson|first2=Charles E.|last3=Rivest|first3=Ronald L.|last4=Stein|first4=Clifford|date=2009|publisher=The MIT Press|isbn=978-0262033848|edition=3rd}}</ref><ref>{{cite book |last1=Black |first1=Paul E. |editor1-last=Pieterse |editor1-first=Vreda |editor2-last=Black |editor2-first=Paul E. |title=Dictionary of Algorithms and Data Structures [online] |date=15 December 2004 |publisher=[[National Institute of Standards and Technology]] |chapter-url=https://xlinux.nist.gov/dads/HTML/datastructur.html |access-date=2018-11-06 |chapter=data structure}}</ref><ref>{{cite encyclopedia |encyclopedia=Encyclopaedia Britannica |title= Data structure |url=https://www.britannica.com/technology/data-structure |access-date=2018-11-06 |date=17 April 2017}}</ref> More precisely, a data structure is a collection of data values, the relationships among them, and the [[Function (computer programming)|functions]] or [[Operator (computer programming)|operations]] that can be applied to the data,<ref>{{Cite book|url=http://dl.acm.org/citation.cfm?id=1074100.1074312|title=Encyclopedia of Computer Science|last1=Wegner|first1=Peter|last2=Reilly|first2=Edwin D.|publisher=John Wiley and Sons |isbn=978-0470864128|location=Chichester, UK|pages=507\u2013512|date=2003-08-29}}</ref> i.e., it is an [[algebraic structure]] about [[data]].\n\n"}, {"title": "Usage ", "content": "Data structures serve as the basis for [[abstract data type]]s (ADT). The ADT defines the logical form of the data type. The data structure implements the physical form of the [[data type]].<ref>{{cite web|title=Abstract Data Types|url=https://opendsa-server.cs.vt.edu/ODSA/Books/CS3/html/ADT.html|website=Virginia Tech - CS3 Data Structures & Algorithms|access-date=2023-02-15|archive-url=https://web.archive.org/web/20230210114105/https://opendsa-server.cs.vt.edu/ODSA/Books/CS3/html/ADT.html|archive-date=2023-02-10|url-status=live}}</ref>\n\nDifferent types of data structures are suited to different kinds of applications, and some are highly specialized to specific tasks. For example, [[Relational database|relational databases]] commonly use [[B-tree]] indexes for data retrieval,<ref>{{cite book|chapter-url=http://searchsecurity.techtarget.com/generic/0,295582,sid87_gci1184450,00.html|archive-url=https://web.archive.org/web/20070818140343/http://searchsqlserver.techtarget.com/generic/0,295582,sid87_gci1184450,00.html|archive-date=2007-08-18|url-status=usurped|title=Beginning Database Design|isbn=978-0-7645-7490-0|author=Gavin Powell|chapter=Chapter 8: Building Fast-Performing Database Models|publisher=[[Wrox Press|Wrox Publishing]]|year=2006}}</ref> while [[compiler]] [[Implementation|implementations]] usually use [[hash table]]s to look up [[Identifier (computer languages)|identifiers]].<ref>{{cite web |title=1.5 Applications of a Hash Table |url=http://www.cs.uregina.ca/Links/class-info/210/Hash/ |website=University of Regina - CS210 Lab: Hash Table |access-date=2018-06-14 |archive-date=2021-04-27 |archive-url=https://web.archive.org/web/20210427183057/https://www.cs.uregina.ca/Links/class-info/210/Hash/ |url-status=dead }}</ref>\n\nData structures provide a means to manage large amounts of data efficiently for uses such as large [[database]]s and internet indexing services. Usually, efficient data structures are key to designing efficient [[algorithm]]s. Some formal design methods and [[programming language]]s emphasize data structures, rather than algorithms, as the key organizing factor in software design. Data structures can be used to organize the storage and retrieval of information stored in both [[main memory]] and [[Computer data storage|secondary memory]].<ref>{{cite web |title=When data is too big to fit into the main memory | archive-url=https://web.archive.org/web/20180410032656/http://homes.sice.indiana.edu/yye/lab/teaching/spring2014-C343/datatoobig.php | url-status=dead | archive-date=2018-04-10 |url=http://homes.sice.indiana.edu/yye/lab/teaching/spring2014-C343/datatoobig.php |website=Indiana University Bloomington - Data Structures (C343/A594)|year=2014}}</ref>\n\n"}, {"title": "Implementation", "content": "Data structures can be implemented using a variety of programming languages and techniques, but they all share the common goal of efficiently organizing and storing data.<ref>{{Cite journal |last1=Vaishnavi |first1=Gunjal |last2=Shraddha |first2=Gavane |last3=Yogeshwari |first3=Joshi |date=2021-06-21 |title=Survey Paper on Fine-Grained Facial Expression Recognition using Machine Learning |url=http://www.ijcaonline.org/archives/volume183/number11/vaishnavi-2021-ijca-921427.pdf |journal=International Journal of Computer Applications |volume=183 |issue=11 |pages=47\u201349 |doi=10.5120/ijca2021921427}}</ref> Data structures are generally based on the ability of a [[computer]] to fetch and store data at any place in its memory, specified by a [[pointer (computer programming)|pointer]]\u2014a [[bit]] [[String (computer science)|string]], representing a [[memory address]], that can be itself stored in memory and manipulated by the program. Thus, the [[Array data structure|array]] and [[record (computer science)|record]] data structures are based on computing the addresses of data items with [[arithmetic operations]], while the [[linked data structure]]s are based on storing addresses of data items within the structure itself. This approach to data structuring has profound implications for the efficiency and scalability of algorithms. For instance, the contiguous memory allocation in arrays facilitates rapid access and modification operations, leading to optimized performance in sequential data processing scenarios.<ref>{{Citation |last1=Nievergelt |first1=J\u00fcrg |title=Chapter 17 - Spatial Data Structures: Concepts and Design Choices |date=2000-01-01 |url=https://www.sciencedirect.com/science/article/pii/B9780444825377500188 |work=Handbook of Computational Geometry |pages=725\u2013764 |editor-last=Sack |editor-first=J. -R. |access-date=2023-11-12 |place=Amsterdam |publisher=North-Holland |isbn=978-0-444-82537-7 |last2=Widmayer |first2=Peter |editor2-last=Urrutia |editor2-first=J.}}</ref> \n\nThe implementation of a data structure usually requires writing a set of [[subroutine|procedures]] that create and manipulate instances of that structure. The efficiency of a data structure cannot be analyzed separately from those operations. This observation motivates the theoretical concept of an [[abstract data type]], a data structure that is defined indirectly by the operations that may be performed on it, and the mathematical properties of those operations (including their space and time cost).<ref>{{Cite book|title=Advanced biotechnology : For B Sc and M Sc students of biotechnology and other biological sciences.|last=Dubey, R. C.|date=2014|publisher=S Chand|isbn=978-81-219-4290-4|location=New Delhi|oclc=883695533}}</ref>\n\n"}, {"title": "Examples", "content": "{{main article|List of data structures}}\n[[File:Python 3. The standard type hierarchy.png|thumb|The standard [[Data type|type]] hierarchy of the programming language [[Python_(programming_language) | Python 3]].]]\nThere are numerous types of data structures, generally built upon simpler [[primitive data type]]s. Well known examples are:<ref>{{Cite book|title=Data structures|last=Seymour|first=Lipschutz|date=2014|publisher=McGraw Hill Education|isbn=9781259029967|edition=Revised first|location=New Delhi, India|oclc=927793728}}</ref>\n* An [[Array (data structure)|array]] is a number of elements in a specific order, typically all of the same type (depending on the language, individual elements may either all be forced to be the same type, or may be of almost any type). Elements are accessed using an integer index to specify which element is required. Typical implementations allocate contiguous memory words for the elements of arrays (but this is not always a necessity). Arrays may be fixed-length or resizable.\n* A [[linked list]] (also just called ''list'') is a linear collection of data elements of any type, called nodes, where each node has itself a value, and points to the next node in the linked list. The principal advantage of a linked list over an array is that values can always be efficiently inserted and removed without relocating the rest of the list. Certain other operations, such as [[random access]] to a certain element, are however slower on lists than on arrays.\n* A [[Record (computer science)|record]] (also called ''tuple'' or ''struct'') is an [[aggregate data]] structure. A record is a value that contains other values, typically in fixed number and sequence and typically indexed by names. The elements of records are usually called ''fields'' or ''members''. In the context of [[object-oriented programming]], records are known as [[plain old data structure]]s to distinguish them from objects.<ref>{{cite web|url=http://www.fnal.gov/docs/working-groups/fpcltf/Pkg/ISOcxx/doc/POD.html |access-date=6 December 2016 |title=C++ Language Note: POD Types |author=Walter E. Brown |publisher=[[Fermi National Accelerator Laboratory]] |date=September 29, 1999|archive-url=https://web.archive.org/web/20161203130543/http://www.fnal.gov/docs/working-groups/fpcltf/Pkg/ISOcxx/doc/POD.html|archive-date=2016-12-03}}</ref>\n* [[Hash table]]s, also known as hash maps, are data structures that provide fast retrieval of values based on keys. They use a hashing function to map keys to indexes in an array, allowing for constant-time access in the average case. Hash tables are commonly used in dictionaries, caches, and database indexing. However, hash collisions can occur, which can impact their performance. Techniques like chaining and open addressing are employed to handle collisions.\n* [[Graph (abstract data type)|Graphs]] are collections of nodes connected by edges, representing relationships between entities. Graphs can be used to model social networks, computer networks, and transportation networks, among other things. They consist of vertices (nodes) and edges (connections between nodes). Graphs can be directed or undirected, and they can have cycles or be acyclic. Graph traversal algorithms include breadth-first search and depth-first search.\n* [[Stack (abstract data type)|Stacks]] and [[queue (abstract data type)|queues]] are abstract data types that can be implemented using arrays or linked lists. A stack has two primary operations: push (adds an element to the top of the stack) and pop (removes the topmost element from the stack), that follow the Last In, First Out (LIFO) principle. Queues have two main operations: enqueue (adds an element to the rear of the queue) and dequeue (removes an element from the front of the queue) that follow the First In, First Out (FIFO) principle.\n* [[Tree (data structure)|Trees]] represent a hierarchical organization of elements. A tree consists of nodes connected by edges, with one node being the root and all other nodes forming subtrees. Trees are widely used in various algorithms and data storage scenarios. [[Binary tree]]s (particularly [[Heap (data structure)|heap]]s), [[AVL tree]]s, and [[B-tree]]s are some popular types of trees. They enable efficient and optimal searching, sorting, and hierarchical representation of data.\n* A [[trie]], also known as a prefix tree, is a specialized tree data structure used for the efficient retrieval of strings. Tries store characters of a string as nodes, with each edge representing a character. They are particularly useful in text processing scenarios like autocomplete, spell-checking, and dictionary implementations. Tries enable fast searching and prefix-based operations on strings.\n\n"}, {"title": "Language support", "content": "Most [[assembly language]]s and some [[Low-level programming language|low-level languages]], such as [[BCPL]] (Basic Combined Programming Language), lack built-in support for data structures. On the other hand, many [[high-level programming language]]s and some higher-level assembly languages, such as [[MASM]], have special syntax or other built-in support for certain data structures, such as records and arrays. For example, the [[C (programming language)|C]] (a direct descendant of BCPL) and [[Pascal (programming language)|Pascal]] languages support [[Record (computer science)|structs]] and records, respectively, in addition to vectors (one-dimensional [[array data type|arrays]]) and multi-dimensional arrays.<ref name=\"gnu-c\">{{cite web | url=https://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html | title=The GNU C Manual | publisher=Free Software Foundation | access-date=2014-10-15}}</ref><ref>{{cite web | url=http://www.freepascal.org/docs-html/ref/ref.html | title=Free Pascal: Reference Guide | publisher=Free Pascal |first = Micha\u00ebl |last =Van Canneyt|date = September 2017}}</ref>\n\nMost programming languages feature some sort of [[Library (computing)|library]] mechanism that allows data structure implementations to be reused by different programs. Modern languages usually come with standard libraries that implement the most common data structures. Examples are the [[C++]] [[Standard Template Library]], the [[Java Collections Framework]], and the [[Microsoft]] [[.NET Framework]].\n\nModern languages also generally support [[modular programming]], the separation between the [[interface (computing)|interface]] of a library module and its implementation. Some provide [[opaque data type]]s that allow clients to hide implementation details. [[Object-oriented programming language]]s, such as [[C++]], [[Java (programming language)|Java]], and [[Smalltalk]], typically use [[classes (computer science)|classes]] for this purpose.\n\nMany known data structures have [[concurrent data structure|concurrent]] versions which allow multiple computing threads to access a single concrete instance of a data structure simultaneously.<ref>{{cite web |author1=Mark Moir and Nir Shavit |title=Concurrent Data Structures |url=https://www.cs.tau.ac.il/~shanir/concurrent-data-structures.pdf |archive-url=https://web.archive.org/web/20110401070433/http://www.cs.tau.ac.il/~shanir/concurrent-data-structures.pdf |archive-date=2011-04-01 |url-status=dead |website=cs.tau.ac.il}}</ref>\n\n"}, {"title": "See also", "content": "{{Div col|colwidth=15em}}\n* [[Abstract data type]]\n* [[Concurrent data structure]]\n* [[Data model]]\n* [[Dynamization]]\n* [[Linked data structure]]\n* [[List of data structures]]\n* [[Persistent data structure]]\n* [[Plain old data structure]]\n* [[Queap]]\n* [[Succinct data structure]]\n* [[Tree (data structure)]]\n{{Div col end}}\n\n"}, {"title": "References", "content": "{{Reflist}}\n\n"}, {"title": "Bibliography", "content": "* Peter Brass, ''Advanced Data Structures'', [[Cambridge University Press]], 2008, {{ISBN|978-0521880374}}\n* [[Donald Knuth]], ''[[The Art of Computer Programming]]'', vol. 1. [[Addison-Wesley]], 3rd edition, 1997, {{ISBN|978-0201896831}}\n* Dinesh Mehta and [[Sartaj Sahni]], ''Handbook of Data Structures and Applications'', [[Chapman and Hall]]/[[CRC Press]], 2004, {{ISBN|1584884355}}\n* [[Niklaus Wirth]], ''Algorithms and Data Structures'', [[Prentice Hall]], 1985, {{ISBN|978-0130220059}}\n\n"}, {"title": "Further reading", "content": "* [[Alfred Aho]], [[John Hopcroft]], and [[Jeffrey Ullman]], ''Data Structures and Algorithms'', Addison-Wesley, 1983, {{ISBN|0-201-00023-7}}\n* [[Gaston Gonnet|G. H. Gonnet]] and [[Ricardo Baeza-Yates|R. Baeza-Yates]], ''[https://users.dcc.uchile.cl/~rbaeza/handbook/hbook.html Handbook of Algorithms and Data Structures - in Pascal and C]'', second edition, Addison-Wesley, 1991, {{ISBN|0-201-41607-7}}\n* [[Ellis Horowitz]] and Sartaj Sahni, ''Fundamentals of Data Structures in Pascal'', [[Computer Science Press]], 1984, {{ISBN|0-914894-94-3}}\n\n"}, {"title": "External links", "content": "{{Sister project links|wikt=data structure|commons=Category:Data structures|b=Data Structures|v=Topic:Data structures|n=no}}\n* [https://web.archive.org/web/20050624234059/http://www.nist.gov/dads/ Descriptions] from the [[Dictionary of Algorithms and Data Structures]]\n* [http://www.cs.auckland.ac.nz/software/AlgAnim/ds_ToC.html Data structures course]\n* [http://msdn.microsoft.com/en-us/library/aa289148(VS.71).aspx An Examination of Data Structures from .NET perspective]\n* [http://people.cs.vt.edu/~shaffer/Book/C++3e20110915.pdf Schaffer, C. ''Data Structures and Algorithm Analysis'']\n\n{{Data structures}}\n{{Data types}}\n{{Data model}}\n{{Strings}}\n\n{{Authority control}}\n\n{{DEFAULTSORT:Data Structure}}\n[[Category:Data structures| ]]"}]}