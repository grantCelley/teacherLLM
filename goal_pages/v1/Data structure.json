{"title": "Data structure", "key": "Data_structure", "summary": "{{short description|Particular way of storing and organizing data in a computer}}\n{{hatgrp|\n{{otheruses}}\n{{distinguish|Data type|Data model}}\n}}\n{{For|information on Wikipedia's data structure|Wikipedia:Administration#Data structure and development|selfref=yes}}\n[[Image:Hash table 3 1 1 0 1 0 0 SP.svg|thumb|315px|A data structure known as a [[hash table]].]] \nIn [[computer science]], a '''data structure''' is a [[data]] organization, management, and storage format that is usually chosen for [[Efficiency|efficient]] [[Data access|access]] to data.<ref>{{Cite book|url=https://dl.acm.org/citation.cfm?id=1614191|title=Introduction to Algorithms, Third Edition|last1=Cormen|first1=Thomas H.|last2=Leiserson|first2=Charles E.|last3=Rivest|first3=Ronald L.|last4=Stein|first4=Clifford|date=2009|publisher=The MIT Press|isbn=978-0262033848|edition=3rd}}</ref><ref>{{cite book |last1=Black |first1=Paul E. |editor1-last=Pieterse |editor1-first=Vreda |editor2-last=Black |editor2-first=Paul E. |title=Dictionary of Algorithms and Data Structures [online] |date=15 December 2004 |publisher=[[National Institute of Standards and Technology]] |chapter-url=https://xlinux.nist.gov/dads/HTML/datastructur.html |access-date=2018-11-06 |chapter=data structure}}</ref><ref>{{cite encyclopedia |encyclopedia=Encyclopaedia Britannica |title= Data structure |url=https://www.britannica.com/technology/data-structure |access-date=2018-11-06 |date=17 April 2017}}</ref> More precisely, a data structure is a collection of data values, the relationships among them, and the [[Function (computer programming)|functions]] or [[Operator (computer programming)|operations]] that can be applied to the data,<ref>{{Cite book|url=http://dl.acm.org/citation.cfm?id=1074100.1074312|title=Encyclopedia of Computer Science|last1=Wegner|first1=Peter|last2=Reilly|first2=Edwin D.|publisher=John Wiley and Sons |isbn=978-0470864128|location=Chichester, UK|pages=507\u2013512|date=2003-08-29}}</ref> i.e., it is an [[algebraic structure]] about [[data]].\n\n", "sections": [{"title": "Implementation", "content": "Data structures can be implemented using a variety of programming languages and techniques, but they all share the common goal of efficiently organizing and storing data.<ref>{{Cite journal |last1=Vaishnavi |first1=Gunjal |last2=Shraddha |first2=Gavane |last3=Yogeshwari |first3=Joshi |date=2021-06-21 |title=Survey Paper on Fine-Grained Facial Expression Recognition using Machine Learning |url=http://www.ijcaonline.org/archives/volume183/number11/vaishnavi-2021-ijca-921427.pdf |journal=International Journal of Computer Applications |volume=183 |issue=11 |pages=47\u201349 |doi=10.5120/ijca2021921427}}</ref> Data structures are generally based on the ability of a [[computer]] to fetch and store data at any place in its memory, specified by a [[pointer (computer programming)|pointer]]\u2014a [[bit]] [[String (computer science)|string]], representing a [[memory address]], that can be itself stored in memory and manipulated by the program. Thus, the [[Array data structure|array]] and [[record (computer science)|record]] data structures are based on computing the addresses of data items with [[arithmetic operations]], while the [[linked data structure]]s are based on storing addresses of data items within the structure itself. This approach to data structuring has profound implications for the efficiency and scalability of algorithms. For instance, the contiguous memory allocation in arrays facilitates rapid access and modification operations, leading to optimized performance in sequential data processing scenarios.<ref>{{Citation |last1=Nievergelt |first1=J\u00fcrg |title=Chapter 17 - Spatial Data Structures: Concepts and Design Choices |date=2000-01-01 |url=https://www.sciencedirect.com/science/article/pii/B9780444825377500188 |work=Handbook of Computational Geometry |pages=725\u2013764 |editor-last=Sack |editor-first=J. -R. |access-date=2023-11-12 |place=Amsterdam |publisher=North-Holland |isbn=978-0-444-82537-7 |last2=Widmayer |first2=Peter |editor2-last=Urrutia |editor2-first=J.}}</ref> \n\nThe implementation of a data structure usually requires writing a set of [[subroutine|procedures]] that create and manipulate instances of that structure. The efficiency of a data structure cannot be analyzed separately from those operations. This observation motivates the theoretical concept of an [[abstract data type]], a data structure that is defined indirectly by the operations that may be performed on it, and the mathematical properties of those operations (including their space and time cost).<ref>{{Cite book|title=Advanced biotechnology : For B Sc and M Sc students of biotechnology and other biological sciences.|last=Dubey, R. C.|date=2014|publisher=S Chand|isbn=978-81-219-4290-4|location=New Delhi|oclc=883695533}}</ref>\n\n", "goals": ["The student will be able to define and explain the concept of data structures and their importance in computer science", "The student will be able to identify and describe the different types of data structures available, including arrays, records, and linked lists", "The student will be able to implement and manipulate data structures in a programming language of their choice", "The student will be able to evaluate and analyze the efficiency of data structures based on the operations performed on them", "The student will be able to define and explain the concept of abstract data types and their role in computer science"]}, {"title": "Language support", "content": "Most [[assembly language]]s and some [[Low-level programming language|low-level languages]], such as [[BCPL]] (Basic Combined Programming Language), lack built-in support for data structures. On the other hand, many [[high-level programming language]]s and some higher-level assembly languages, such as [[MASM]], have special syntax or other built-in support for certain data structures, such as records and arrays. For example, the [[C (programming language)|C]] (a direct descendant of BCPL) and [[Pascal (programming language)|Pascal]] languages support [[Record (computer science)|structs]] and records, respectively, in addition to vectors (one-dimensional [[array data type|arrays]]) and multi-dimensional arrays.<ref name=\"gnu-c\">{{cite web | url=https://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html | title=The GNU C Manual | publisher=Free Software Foundation | access-date=2014-10-15}}</ref><ref>{{cite web | url=http://www.freepascal.org/docs-html/ref/ref.html | title=Free Pascal: Reference Guide | publisher=Free Pascal |first = Micha\u00ebl |last =Van Canneyt|date = September 2017}}</ref>\n\nMost programming languages feature some sort of [[Library (computing)|library]] mechanism that allows data structure implementations to be reused by different programs. Modern languages usually come with standard libraries that implement the most common data structures. Examples are the [[C++]] [[Standard Template Library]], the [[Java Collections Framework]], and the [[Microsoft]] [[.NET Framework]].\n\nModern languages also generally support [[modular programming]], the separation between the [[interface (computing)|interface]] of a library module and its implementation. Some provide [[opaque data type]]s that allow clients to hide implementation details. [[Object-oriented programming language]]s, such as [[C++]], [[Java (programming language)|Java]], and [[Smalltalk]], typically use [[classes (computer science)|classes]] for this purpose.\n\nMany known data structures have [[concurrent data structure|concurrent]] versions which allow multiple computing threads to access a single concrete instance of a data structure simultaneously.<ref>{{cite web |author1=Mark Moir and Nir Shavit |title=Concurrent Data Structures |url=https://www.cs.tau.ac.il/~shanir/concurrent-data-structures.pdf |archive-url=https://web.archive.org/web/20110401070433/http://www.cs.tau.ac.il/~shanir/concurrent-data-structures.pdf |archive-date=2011-04-01 |url-status=dead |website=cs.tau.ac.il}}</ref>\n\n", "goals": ["The student will be able to define and explain the concept of data structures, their importance in programming, and their role in the efficient execution of programs", "The student will be able to identify and describe the different types of data structures, including arrays, stacks, queues, and trees, and understand their applications in programming", "The student will be able to implement and manipulate data structures in a programming language, such as C++, Java, or Python, and understand the role of algorithms in the efficient execution of programs", "The student will be able to evaluate and analyze the performance of data structures and algorithms, and understand the trade-offs between time complexity and space complexity", "The student will be able to design and implement their own data structures and algorithms, and understand the role of data structures in the efficient execution of programs"]}, {"title": "Further reading", "content": "* [[Alfred Aho]], [[John Hopcroft]], and [[Jeffrey Ullman]], ''Data Structures and Algorithms'', Addison-Wesley, 1983, {{ISBN|0-201-00023-7}}\n* [[Gaston Gonnet|G. H. Gonnet]] and [[Ricardo Baeza-Yates|R. Baeza-Yates]], ''[https://users.dcc.uchile.cl/~rbaeza/handbook/hbook.html Handbook of Algorithms and Data Structures - in Pascal and C]'', second edition, Addison-Wesley, 1991, {{ISBN|0-201-41607-7}}\n* [[Ellis Horowitz]] and Sartaj Sahni, ''Fundamentals of Data Structures in Pascal'', [[Computer Science Press]], 1984, {{ISBN|0-914894-94-3}}\n\n", "goals": ["The student will be able to define and explain the concept of data structures and their importance in computer science", "The student will be able to identify and describe the different types of data structures available and their applications", "The student will be able to implement and manipulate data structures in a programming language", "The student will be able to evaluate and analyze the efficiency and effectiveness of data structures in terms of time and space complexity", "The student will be able to compare and contrast different data structures and select the most appropriate one for a given problem"]}, {"title": "External links", "content": "{{Sister project links|wikt=data structure|commons=Category:Data structures|b=Data Structures|v=Topic:Data structures|n=no}}\n* [https://web.archive.org/web/20050624234059/http://www.nist.gov/dads/ Descriptions] from the [[Dictionary of Algorithms and Data Structures]]\n* [http://www.cs.auckland.ac.nz/software/AlgAnim/ds_ToC.html Data structures course]\n* [http://msdn.microsoft.com/en-us/library/aa289148(VS.71).aspx An Examination of Data Structures from .NET perspective]\n* [http://people.cs.vt.edu/~shaffer/Book/C++3e20110915.pdf Schaffer, C. ''Data Structures and Algorithm Analysis'']\n\n{{Data structures}}\n{{Data types}}\n{{Data model}}\n{{Strings}}\n\n{{Authority control}}\n\n{{DEFAULTSORT:Data Structure}}\n[[Category:Data structures| ]]", "goals": ["The student will be able to define and explain the concept of data structures", "The student will be able to identify and describe the different types of data structures", "The student will be able to explain the concept of data types and their role in data structures", "The student will be able to identify and describe the different types of data types", "The student will be able to explain the concept of data models and their role in data structures"]}]}